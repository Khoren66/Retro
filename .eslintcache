[{"/Users/khoren/work/Retro/src/components/RetroEditModal.js":"1","/Users/khoren/work/Retro/src/screens/admin/Admin.js":"2","/Users/khoren/work/Retro/src/components/RetroTable.js":"3","/Users/khoren/work/Retro/src/Api/index.js":"4","/Users/khoren/work/Retro/src/components/LoginForm.js":"5","/Users/khoren/work/Retro/src/screens/board/RetroBoard.js":"6","/Users/khoren/work/Retro/src/reportWebVitals.js":"7","/Users/khoren/work/Retro/src/screens/login/Login.js":"8","/Users/khoren/work/Retro/src/components/Board.js":"9","/Users/khoren/work/Retro/src/App.js":"10","/Users/khoren/work/Retro/src/components/Footer.js":"11","/Users/khoren/work/Retro/src/components/RetroForm.js":"12","/Users/khoren/work/Retro/src/index.js":"13","/Users/khoren/work/Retro/src/components/Header.js":"14","/Users/khoren/work/Retro/src/components/RetroCard.js":"15"},{"size":2610,"mtime":1625060822854,"results":"16","hashOfConfig":"17"},{"size":2793,"mtime":1625127919889,"results":"18","hashOfConfig":"17"},{"size":2338,"mtime":1625057088920,"results":"19","hashOfConfig":"17"},{"size":1260,"mtime":1625485541874,"results":"20","hashOfConfig":"17"},{"size":2311,"mtime":1625426460484,"results":"21","hashOfConfig":"17"},{"size":708,"mtime":1625425096240,"results":"22","hashOfConfig":"17"},{"size":362,"mtime":1606739135934,"results":"23","hashOfConfig":"17"},{"size":355,"mtime":1624460390219,"results":"24","hashOfConfig":"17"},{"size":18972,"mtime":1625490675018,"results":"25","hashOfConfig":"17"},{"size":794,"mtime":1624521432061,"results":"26","hashOfConfig":"17"},{"size":398,"mtime":1609763327764,"results":"27","hashOfConfig":"17"},{"size":3623,"mtime":1625426472859,"results":"28","hashOfConfig":"17"},{"size":500,"mtime":1606739135933,"results":"29","hashOfConfig":"17"},{"size":915,"mtime":1625218166217,"results":"30","hashOfConfig":"17"},{"size":2920,"mtime":1625486544323,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1b8nmku",{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/khoren/work/Retro/src/components/RetroEditModal.js",["66","67","68"],"/Users/khoren/work/Retro/src/screens/admin/Admin.js",[],["69","70"],"/Users/khoren/work/Retro/src/components/RetroTable.js",["71","72","73","74"],"/Users/khoren/work/Retro/src/Api/index.js",["75"],"/Users/khoren/work/Retro/src/components/LoginForm.js",["76"],"/Users/khoren/work/Retro/src/screens/board/RetroBoard.js",["77","78"],"import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Header from \"../../components/Header\";\nimport Api from \"../../Api/index.js\";\nimport Board from \"../../components/Board\";\nimport \"./retroBoard.css\";\n\nconst RetroBoard = () => {\n  const [retro, setRetro] = useState([]);\n  const {cards} = retro\n  const { id } = useParams();\n  useEffect(async() => {\n    await Api.getRetro(id)\n      .get()\n      .then((res) => {\n        setRetro(res.data);\n      });\n      console.log(cards)\n  }, []);\n\n  return (\n    <div className=\"wrapper-scroll\">\n      <Header retro={retro?retro:\"\"} />    \n      <Board cards={cards} />\n    </div>\n  );\n};\n\nexport default RetroBoard;\n","/Users/khoren/work/Retro/src/reportWebVitals.js",[],"/Users/khoren/work/Retro/src/screens/login/Login.js",[],["79","80"],"/Users/khoren/work/Retro/src/components/Board.js",["81","82","83","84","85","86","87"],"import React, { useEffect, useState } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport \"./board.css\";\nimport { useParams } from \"react-router-dom\";\nimport {\n  CheckCircleFilled,\n  CloseCircleFilled,\n  UserOutlined,\n  EditFilled,\n  ExclamationCircleOutlined,\n  LikeFilled,\n} from \"@ant-design/icons\";\nimport { Typography, Input, Modal, Button } from \"antd\";\nimport Api from \"../Api\";\nimport RetroCard from \"./RetroCard\";\nconst { TextArea } = Input;\nconst { confirm } = Modal;\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\n/**\n * Moves an item from one list to another list.\n */\nconst move = (source, destination, droppableSource, droppableDestination) => {\n  const sourceClone = Array.from(source);\n  const destClone = Array.from(destination);\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\n\n  destClone.splice(droppableDestination.index, 0, removed);\n\n  const result = {};\n  result[droppableSource.droppableId] = sourceClone;\n  result[droppableDestination.droppableId] = destClone;\n\n  return result;\n};\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the wells look a bit nicer\n  userSelect: \"none\",\n  padding: \"8px 8px 0\",\n  margin: `0 0 8px`,\n\n  // change background colour if dragging\n  background: isDragging ? \"lightgreen\" : \"grey\",\n\n  // styles we need to apply on draggables\n  ...draggableStyle,\n});\n\nconst getListStyle = (isDraggingOver) => ({\n  // background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n  minHeight: \"70vh\",\n});\n\nconst wellDefault = {\n  created_by: \"\",\n  text: \"\",\n  card_type: \"wells\",\n  votes: 0,\n};\nconst improveDefault = {\n  created_by: \"\",\n  text: \"\",\n  card_type: \"improves\",\n  votes: 0,\n};\nconst actionDefault = {\n  created_by: \"\",\n  text: \"\",\n  card_type: \"actions\",\n  votes: 0,\n};\nconst formVisible = {\n  wellVisible: false,\n  improveVisible: false,\n  actionVisible: false,\n};\n\nconst id2List = {\n  dropWell: \"wells\",\n  dropImprove: \"improves\",\n  dropAction: \"actions\",\n};\n\nconst Board = ({ cards }) => {\n  // const [wellData, setWell] = useState([]);\n  const [show, setShow] = useState(formVisible);\n  const [formWell, setFormWell] = useState(wellDefault);\n  const [formImprove, setFormImprove] = useState(improveDefault);\n  const [formAction, setFormAction] = useState(actionDefault);\n  const [isNameModalVisible, setNameModalVisible] = useState(false);\n  const [user, setUserName] = useState({ name: \"\" });\n  // const [improvesData, setImproves] = useState([]);\n  // const [actions, setActions] = useState([]);\n  const [cardsData, setCards] = useState([]);\n  const { id } = useParams(); /////========>>>\n\n  const [state, setState] = useState({\n    wells: [],\n    improves: [],\n    actions: [],\n    retro_id: \"\",\n  });\n  const { actions, wells, improves, retro_id } = state;\n\n  useEffect(async () => {\n    let user = JSON.parse(localStorage.getItem(\"retro_open_user\"));\n    if (!user) {\n      setNameModalVisible(true);\n    } else {\n      setUserName({ name: user.name });\n    }\n    await Api.getRetro(id)\n      .get()\n      .then((res) => {\n        let well = res.data.cards.filter((item) => item.card_type === \"wells\");\n        let retro_id = res.data.id;\n        //setWell(well);\n        let improves = res.data.cards.filter(\n          (item) => item.card_type === \"improves\"\n        );\n        //setImproves(improves);\n        let action = res.data.cards.filter(\n          (item) => item.card_type === \"actions\"\n        );\n        setState({\n          wells: well,\n          improves: improves,\n          actions: action,\n          retro_id: retro_id,\n        });\n      });\n  }, []);\n\n  const getList = (id) => state[id2List[id]];\n\n  const onDragEnd = (result) => {\n    // console.log(result, \"result for DRAG END\");\n    const { source, destination } = result;\n    console.log(\n      improves[source.index],\n      \"source for DRAG END =====>>>2222222 this shoud be merged and removed\"\n    );\n    console.log(\n      improves[destination.index],\n      \"destination for DRAG END where must be merged\"\n    );\n    // dropped outside the list\n    if (!destination) {\n      return;\n    }\nconsole.log(source.droppableId,\"source.droppableId\")\nconsole.log(destination.droppableId,\"destination.droppableId\")\n    if (source.droppableId === destination.droppableId) {\n      const columnCards = reorder(\n        getList(source.droppableId),\n        source.index,\n        destination.index\n      );\n\n      let stateColumn = { columnCards };\n      // console.log(\n      //   stateColumn,\n      //   \"STATE row 133 if (source.droppableId === destination.droppableId) {\"\n      // );\n\n      // console.log(\n      //   source,\n      //   \"Ssource.droppableId === (source.droppableId === destination.droppableId) {\"\n      // );\n      \n      if (source.droppableId === \"dropImprove\") {\n        showConfirm(improves[source.index], improves[destination.index])\n        stateColumn = { improves: columnCards };\n      } else if (source.droppableId === \"dropAction\") {\n        showConfirm(actions[source.index], actions[destination.index])\n        stateColumn = { actions: columnCards };\n        // console.log(\n        //   state,\n        //   \"STATS in else if(source.droppableId === dropAction\"\n        // );\n      }else{\n        showConfirm(wells[source.index], wells[destination.index])\n        stateColumn = { wells: columnCards };\n      }\n\n      setState({ ...state, stateColumn });\n    } else {\n      // console.log(\n      //   state,\n      //   \"STATE row 133 else ====>{source.droppableId === destination.droppableId) {\"\n      // );\n      // console.log(\n      //   getList(source.droppableId),\n      //   \"getList(source.droppableId)=======>\"\n      // );\n      // console.log(\n      //   getList(destination.droppableId),\n      //   \" getList(destination.droppableId)=======>\"\n      // );\n\n      const result = move(\n        getList(source.droppableId),\n        getList(destination.droppableId),\n        source,\n        destination\n      );\n      console.log(result, \"result ==========>>>RESULT\");\n      if (result.dropWell && result.dropImprove) {\n        setState({\n          ...state,\n          wells: result.dropWell,\n          improves: result.dropImprove,\n        });\n      } else if (result.dropWell && result.dropAction) {\n        setState({\n          ...state,\n          wells: result.dropWell,\n          actions: result.dropAction,\n        });\n      } else {\n        setState({\n          ...state,\n          improves: result.dropImprove,\n          actions: result.dropAction,\n        });\n      }\n    }\n  };\n\n  const showConfirm = (sourceCard, destinationCard) => {\n    confirm({\n      title: \"Do you Want to merge these items?\",\n      icon: <ExclamationCircleOutlined />,\n      content:[\n        <p>{sourceCard.text}</p>,\n        <p>================</p>,\n        <p>{destinationCard.text}</p>\n      ],\n      onOk() {\n        console.log(\"OK\");\n      },\n      onCancel() {\n        console.log(\"Cancel\");\n      },\n    });\n  };\n  const handleAddWellCard = (e) => {\n    console.log(formWell);\n    if (\n      (e.key === \"Enter\" || !e.key) &&\n      formWell.text.length > 0 &&\n      !formWell.text.includes(\"\\n\")\n    ) {\n      setShow({ ...show, wellVisible: false });\n      console.log({ ...formWell, retro_id, created_by: user.name });\n      Api.cards\n        .post({ ...formWell, retro_id, created_by: user.name })\n        .then((res) => {\n          if ((res.statusText = \"OK\")) {\n            setState({ ...state, wells: [...wells, res.data] });\n          }\n        })\n        .catch((reqErr) => {\n          console.error(reqErr);\n          console.log(reqErr.res.status);\n        });\n      setFormWell(wellDefault);\n    }\n  };\n\n  const handleAddImproveCard = (e) => {\n    if (\n      (e.key === \"Enter\" || !e.key) &&\n      formImprove.text.length > 0 &&\n      !formImprove.text.includes(\"\\n\")\n    ) {\n      setShow({ ...show, improveVisible: false });\n      Api.cards\n        .post({ ...formImprove, retro_id, created_by: user.name })\n        .then((res) => {\n          if ((res.statusText = \"OK\")) {\n            setState({ ...state, improves: [...improves, res.data] });\n          }\n        })\n        .catch((reqErr) => {\n          console.error(reqErr);\n          console.log(reqErr.res.status);\n        });\n      setFormImprove(improveDefault);\n    }\n  };\n\n  const handleAddActionCard = (e) => {\n    if (\n      (e.key === \"Enter\" || !e.key) &&\n      formAction.text.length > 0 &&\n      !formAction.text.includes(\"\\n\")\n    ) {\n      setShow({ ...show, actionVisible: false });\n      Api.cards\n        .post({ ...formAction, retro_id, created_by: user.name })\n        .then((res) => {\n          if ((res.statusText = \"OK\")) {\n            setState({ ...state, actions: [...actions, res.data] });\n          }\n        })\n        .catch((reqErr) => {\n          console.error(reqErr);\n          console.log(reqErr.res.status);\n        });\n      setFormAction(actionDefault);\n    }\n  };\n\n  const handleShowWell = () => {\n    if (show.wellVisible) {\n      setShow({ ...show, wellVisible: false });\n      setFormWell(wellDefault);\n    } else {\n      setShow({ ...show, wellVisible: true });\n    }\n  };\n  const handleShowImprove = () => {\n    if (show.improveVisible) {\n      setShow({ ...show, improveVisible: false });\n      setFormImprove(improveDefault);\n    } else {\n      setShow({ ...show, improveVisible: true });\n    }\n  };\n  const handleShowAction = () => {\n    if (show.actionVisible) {\n      setShow({ ...show, actionVisible: false });\n      setFormAction(actionDefault);\n    } else {\n      setShow({ ...show, actionVisible: true });\n    }\n  };\n\n  const handleWellChange = ({ target: { name, value } }) => {\n    setFormWell({ ...formWell, [name]: value });\n  };\n\n  const handleImproveChange = ({ target: { name, value } }) => {\n    setFormImprove({ ...formImprove, [name]: value });\n  };\n\n  const handleActionChange = ({ target: { name, value } }) => {\n    setFormAction({ ...formAction, [name]: value });\n  };\n\n  const handleCloseActionForm = () => {\n    setFormAction(actionDefault);\n    setShow({ ...show, actionVisible: false });\n  };\n  const handleCloseImproveForm = () => {\n    setFormImprove(improveDefault);\n    setShow({ ...show, improveVisible: false });\n  };\n  const handleCloseWellForm = () => {\n    setFormWell(wellDefault);\n    setShow({ ...show, wellVisible: false });\n  };\n\n  const handleNameModalConfirm = () => {\n    if (user.name.length > 0) {\n      localStorage.setItem(\"retro_open_user\", JSON.stringify(user));\n      setNameModalVisible(false);\n    }\n  };\n  const handleModalNameChange = ({ target: { name, value } }) => {\n    setUserName({ ...user, [name]: value });\n    console.log(user);\n  };\n  return (\n    <div>\n      <Modal\n        title=\"Please type your name\"\n        footer={[\n          <Button\n            onClick={handleNameModalConfirm}\n            style={{ background: \"#3f5b70\", color: \"white\" }}\n          >\n            Confirm\n          </Button>,\n        ]}\n        visible={isNameModalVisible}\n      >\n        <Input\n          size=\"large\"\n          name=\"name\"\n          onChange={handleModalNameChange}\n          placeholder=\"Your name\"\n          prefix={<UserOutlined />}\n        />\n      </Modal>\n      <div className=\"retro-headers\">\n        <div style={{ width: \"30%\" }}>\n          <Typography>\n            <h3>Went well</h3>\n          </Typography>\n          <button\n            disabled={show.wellVisible}\n            onClick={handleShowWell}\n            className={show.wellVisible ? \"disbled-button\" : \"prymary-color\"}\n          >\n            {show.wellVisible ? \"Close\" : \"+\"}\n          </button>\n        </div>\n        <div style={{ width: \"30%\" }}>\n          <Typography>\n            <h3>To improve</h3>\n          </Typography>\n          <button\n            disabled={show.improveVisible}\n            onClick={handleShowImprove}\n            className={show.improveVisible ? \"disbled-button\" : \"prymary-color\"}\n          >\n            {show.improveVisible ? \"Close\" : \"+\"}\n          </button>\n        </div>\n        <div style={{ width: \"30%\" }}>\n          <Typography>\n            <h3>Action items</h3>\n          </Typography>\n          <button\n            disabled={show.actionVisible}\n            onClick={handleShowAction}\n            className={show.actionVisible ? \"disbled-button\" : \"prymary-color\"}\n          >\n            {show.actionVisible ? \"Close\" : \"+\"}\n          </button>\n        </div>\n      </div>\n\n      <div className=\"board-columns column-wrapper\">\n        <DragDropContext onDragEnd={onDragEnd}>\n          <div style={{ width: \"30%\" }}>\n            <TextArea\n              value={formWell.text}\n              name=\"text\"\n              className=\"text-field\"\n              onKeyDown={handleAddWellCard}\n              onChange={handleWellChange}\n              style={{ display: show.wellVisible ? \"inline-block\" : \"none\" }}\n              placeholder=\"What did go well ?\"\n              autoSize={{ minRows: 3, maxRows: 4 }}\n            />\n            <div className=\"icons-right\">\n              <CloseCircleFilled\n                onClick={handleCloseWellForm}\n                style={{ display: show.wellVisible ? \"inline-block\" : \"none\" }}\n                className=\"remove-icon\"\n              />\n              <CheckCircleFilled\n                onClick={handleAddWellCard}\n                style={{ display: show.wellVisible ? \"inline-block\" : \"none\" }}\n                className=\"accept-icon\"\n              />\n            </div>\n            <Droppable droppableId=\"dropWell\">\n              {(provided, snapshot) => (\n                <div\n                  ref={provided.innerRef}\n                  style={getListStyle(snapshot.isDraggingOver)}\n                >\n                  {state.wells.map((item, index) => (\n                    <Draggable\n                      key={item.id}\n                      draggableId={item.id.toString()}\n                      index={index}\n                    >\n                      {(provided, snapshot) => (\n                        <RetroCard\n                          state={state}\n                          setState={setState}\n                          item={item}\n                          provided={provided}\n                          getItemStyle={getItemStyle}\n                          snapshot={snapshot}\n                        />\n                      )}\n                    </Draggable>\n                  ))}\n                  {provided.placeholder}\n                </div>\n              )}\n            </Droppable>\n          </div>\n          <div style={{ width: \"30%\" }}>\n            <TextArea\n              value={formImprove.text}\n              name=\"text\"\n              className=\"text-field\"\n              onKeyDown={handleAddImproveCard}\n              onChange={handleImproveChange}\n              style={{ display: show.improveVisible ? \"inline-block\" : \"none\" }}\n              placeholder=\"What should be improved ?\"\n              autoSize={{ minRows: 3, maxRows: 4 }}\n            />\n            <div className=\"icons-right\">\n              <CloseCircleFilled\n                onClick={handleCloseImproveForm}\n                style={{\n                  display: show.improveVisible ? \"inline-block\" : \"none\",\n                }}\n                className=\"remove-icon\"\n              />\n              <CheckCircleFilled\n                onClick={handleAddImproveCard}\n                style={{\n                  display: show.improveVisible ? \"inline-block\" : \"none\",\n                }}\n                className=\"accept-icon\"\n              />\n            </div>\n            <Droppable droppableId=\"dropImprove\">\n              {(provided, snapshot) => (\n                <div\n                  ref={provided.innerRef}\n                  style={getListStyle(snapshot.isDraggingOver)}\n                >\n                  {state.improves.map((item, index) => (\n                    <Draggable\n                      key={item.id}\n                      draggableId={item.id.toString()}\n                      index={index}\n                    >\n                      {(provided, snapshot) => (\n                        <RetroCard\n                          state={state}\n                          setState={setState}\n                          item={item}\n                          provided={provided}\n                          getItemStyle={getItemStyle}\n                          snapshot={snapshot}\n                        />\n                      )}\n                    </Draggable>\n                  ))}\n                  {provided.placeholder}\n                </div>\n              )}\n            </Droppable>\n          </div>\n          <div style={{ width: \"30%\" }}>\n            <TextArea\n              value={formAction.text}\n              name=\"text\"\n              className=\"text-field\"\n              style={{ display: show.actionVisible ? \"inline-block\" : \"none\" }}\n              onKeyDown={handleAddActionCard}\n              onChange={handleActionChange}\n              placeholder=\"What are we going to do ?\"\n              autoSize={{ minRows: 3, maxRows: 4 }}\n            />\n            <div className=\"icons-right\">\n              <CloseCircleFilled\n                onClick={handleCloseActionForm}\n                style={{\n                  display: show.actionVisible ? \"inline-block\" : \"none\",\n                }}\n                className=\"remove-icon\"\n              />\n              <CheckCircleFilled\n                onClick={handleAddActionCard}\n                style={{\n                  display: show.actionVisible ? \"inline-block\" : \"none\",\n                }}\n                className=\"accept-icon\"\n              />\n            </div>\n            <Droppable droppableId=\"dropAction\">\n              {(provided, snapshot) => (\n                <div\n                  ref={provided.innerRef}\n                  style={getListStyle(snapshot.isDraggingOver)}\n                >\n                  {state.actions.map((item, index) => (\n                    <Draggable\n                      key={item.id}\n                      draggableId={item.id.toString()}\n                      index={index}\n                    >\n                      {(provided, snapshot) => (\n                        <RetroCard\n                          state={state}\n                          setState={setState}\n                          item={item}\n                          provided={provided}\n                          getItemStyle={getItemStyle}\n                          snapshot={snapshot}\n                        />\n                      )}\n                    </Draggable>\n                  ))}\n                  {provided.placeholder}\n                </div>\n              )}\n            </Droppable>\n          </div>\n        </DragDropContext>\n      </div>\n    </div>\n  );\n};\n\nexport default Board;\n","/Users/khoren/work/Retro/src/App.js",["88","89"],"/Users/khoren/work/Retro/src/components/Footer.js",[],"/Users/khoren/work/Retro/src/components/RetroForm.js",["90","91","92"],"/Users/khoren/work/Retro/src/index.js",[],"/Users/khoren/work/Retro/src/components/Header.js",["93","94","95","96","97"],"/Users/khoren/work/Retro/src/components/RetroCard.js",["98"],{"ruleId":"99","severity":1,"message":"100","line":1,"column":17,"nodeType":"101","messageId":"102","endLine":1,"endColumn":23},{"ruleId":"99","severity":1,"message":"103","line":4,"column":24,"nodeType":"101","messageId":"102","endLine":4,"endColumn":36},{"ruleId":"99","severity":1,"message":"104","line":20,"column":30,"nodeType":"101","messageId":"102","endLine":20,"endColumn":37},{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","replacedBy":"108"},{"ruleId":"99","severity":1,"message":"109","line":2,"column":8,"nodeType":"101","messageId":"102","endLine":2,"endColumn":13},{"ruleId":"99","severity":1,"message":"110","line":6,"column":3,"nodeType":"101","messageId":"102","endLine":6,"endColumn":20},{"ruleId":"99","severity":1,"message":"111","line":7,"column":3,"nodeType":"101","messageId":"102","endLine":7,"endColumn":20},{"ruleId":"112","severity":1,"message":"113","line":16,"column":13,"nodeType":"114","endLine":22,"endColumn":4},{"ruleId":"115","severity":1,"message":"116","line":36,"column":1,"nodeType":"117","endLine":44,"endColumn":3},{"ruleId":"118","severity":1,"message":"119","line":32,"column":15,"nodeType":"120","messageId":"121","endLine":32,"endColumn":36},{"ruleId":"112","severity":1,"message":"113","line":12,"column":13,"nodeType":"114","endLine":19,"endColumn":4},{"ruleId":"112","severity":1,"message":"122","line":19,"column":6,"nodeType":"123","endLine":19,"endColumn":8,"suggestions":"124"},{"ruleId":"105","replacedBy":"125"},{"ruleId":"107","replacedBy":"126"},{"ruleId":"99","severity":1,"message":"127","line":9,"column":3,"nodeType":"101","messageId":"102","endLine":9,"endColumn":13},{"ruleId":"99","severity":1,"message":"128","line":11,"column":3,"nodeType":"101","messageId":"102","endLine":11,"endColumn":13},{"ruleId":"99","severity":1,"message":"129","line":45,"column":7,"nodeType":"101","messageId":"102","endLine":45,"endColumn":11},{"ruleId":"99","severity":1,"message":"130","line":105,"column":10,"nodeType":"101","messageId":"102","endLine":105,"endColumn":19},{"ruleId":"99","severity":1,"message":"131","line":105,"column":21,"nodeType":"101","messageId":"102","endLine":105,"endColumn":29},{"ruleId":"112","severity":1,"message":"113","line":116,"column":13,"nodeType":"114","endLine":143,"endColumn":4},{"ruleId":"112","severity":1,"message":"132","line":143,"column":6,"nodeType":"123","endLine":143,"endColumn":8,"suggestions":"133"},{"ruleId":"99","severity":1,"message":"134","line":11,"column":8,"nodeType":"101","messageId":"102","endLine":11,"endColumn":14},{"ruleId":"99","severity":1,"message":"135","line":12,"column":8,"nodeType":"101","messageId":"102","endLine":12,"endColumn":14},{"ruleId":"99","severity":1,"message":"136","line":2,"column":10,"nodeType":"101","messageId":"102","endLine":2,"endColumn":17},{"ruleId":"99","severity":1,"message":"137","line":26,"column":7,"nodeType":"101","messageId":"102","endLine":26,"endColumn":14},{"ruleId":"118","severity":1,"message":"119","line":44,"column":15,"nodeType":"120","messageId":"121","endLine":44,"endColumn":36},{"ruleId":"99","severity":1,"message":"138","line":1,"column":17,"nodeType":"101","messageId":"102","endLine":1,"endColumn":26},{"ruleId":"99","severity":1,"message":"139","line":1,"column":27,"nodeType":"101","messageId":"102","endLine":1,"endColumn":35},{"ruleId":"99","severity":1,"message":"140","line":2,"column":22,"nodeType":"101","messageId":"102","endLine":2,"endColumn":27},{"ruleId":"99","severity":1,"message":"141","line":3,"column":8,"nodeType":"101","messageId":"102","endLine":3,"endColumn":11},{"ruleId":"142","severity":1,"message":"143","line":21,"column":9,"nodeType":"144","endLine":21,"endColumn":144},{"ruleId":"99","severity":1,"message":"127","line":5,"column":3,"nodeType":"101","messageId":"102","endLine":5,"endColumn":13},"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'CopyOutlined' is defined but never used.","'user_id' is assigned a value but never used.","no-native-reassign",["145"],"no-negated-in-lhs",["146"],"'axios' is defined but never used.","'CheckCircleFilled' is defined but never used.","'CloseCircleFilled' is defined but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","React Hook useEffect has missing dependencies: 'cards' and 'id'. Either include them or remove the dependency array.","ArrayExpression",["147"],["145"],["146"],"'EditFilled' is defined but never used.","'LikeFilled' is defined but never used.","'grid' is assigned a value but never used.","'cardsData' is assigned a value but never used.","'setCards' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["148"],"'Header' is defined but never used.","'Footer' is defined but never used.","'NavLink' is defined but never used.","'history' is assigned a value but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'Image' is defined but never used.","'Api' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"149","fix":"150"},{"desc":"151","fix":"152"},"Update the dependencies array to be: [cards, id]",{"range":"153","text":"154"},"Update the dependencies array to be: [id]",{"range":"155","text":"156"},[533,535],"[cards, id]",[3854,3856],"[id]"]