[{"/Users/khoren/work/Retro/src/components/RetroEditModal.js":"1","/Users/khoren/work/Retro/src/screens/admin/Admin.js":"2","/Users/khoren/work/Retro/src/components/RetroTable.js":"3","/Users/khoren/work/Retro/src/Api/index.js":"4","/Users/khoren/work/Retro/src/components/LoginForm.js":"5","/Users/khoren/work/Retro/src/screens/board/RetroBoard.js":"6","/Users/khoren/work/Retro/src/reportWebVitals.js":"7","/Users/khoren/work/Retro/src/screens/login/Login.js":"8","/Users/khoren/work/Retro/src/components/Board.js":"9","/Users/khoren/work/Retro/src/App.js":"10","/Users/khoren/work/Retro/src/components/Footer.js":"11","/Users/khoren/work/Retro/src/components/RetroForm.js":"12","/Users/khoren/work/Retro/src/index.js":"13","/Users/khoren/work/Retro/src/components/Header.js":"14"},{"size":2610,"mtime":1625060822854,"results":"15","hashOfConfig":"16"},{"size":2793,"mtime":1625127919889,"results":"17","hashOfConfig":"16"},{"size":2338,"mtime":1625057088920,"results":"18","hashOfConfig":"16"},{"size":1205,"mtime":1625425316281,"results":"19","hashOfConfig":"16"},{"size":2311,"mtime":1625426460484,"results":"20","hashOfConfig":"16"},{"size":708,"mtime":1625425096240,"results":"21","hashOfConfig":"16"},{"size":362,"mtime":1606739135934,"results":"22","hashOfConfig":"16"},{"size":355,"mtime":1624460390219,"results":"23","hashOfConfig":"16"},{"size":20192,"mtime":1625427947612,"results":"24","hashOfConfig":"16"},{"size":794,"mtime":1624521432061,"results":"25","hashOfConfig":"16"},{"size":398,"mtime":1609763327764,"results":"26","hashOfConfig":"16"},{"size":3623,"mtime":1625426472859,"results":"27","hashOfConfig":"16"},{"size":500,"mtime":1606739135933,"results":"28","hashOfConfig":"16"},{"size":915,"mtime":1625218166217,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1b8nmku",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/khoren/work/Retro/src/components/RetroEditModal.js",["62","63","64"],"/Users/khoren/work/Retro/src/screens/admin/Admin.js",[],["65","66"],"/Users/khoren/work/Retro/src/components/RetroTable.js",["67","68","69","70"],"/Users/khoren/work/Retro/src/Api/index.js",["71"],"/Users/khoren/work/Retro/src/components/LoginForm.js",["72"],"/Users/khoren/work/Retro/src/screens/board/RetroBoard.js",["73","74"],"import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Header from \"../../components/Header\";\nimport Api from \"../../Api/index.js\";\nimport Board from \"../../components/Board\";\nimport \"./retroBoard.css\";\n\nconst RetroBoard = () => {\n  const [retro, setRetro] = useState([]);\n  const {cards} = retro\n  const { id } = useParams();\n  useEffect(async() => {\n    await Api.getRetro(id)\n      .get()\n      .then((res) => {\n        setRetro(res.data);\n      });\n      console.log(cards)\n  }, []);\n\n  return (\n    <div className=\"wrapper-scroll\">\n      <Header retro={retro?retro:\"\"} />    \n      <Board cards={cards} />\n    </div>\n  );\n};\n\nexport default RetroBoard;\n","/Users/khoren/work/Retro/src/reportWebVitals.js",[],"/Users/khoren/work/Retro/src/screens/login/Login.js",[],["75","76"],"/Users/khoren/work/Retro/src/components/Board.js",["77","78","79","80","81"],"import React, { useEffect, useState } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport \"./board.css\";\nimport { useParams } from \"react-router-dom\";\nimport { CheckCircleFilled, CloseCircleFilled } from \"@ant-design/icons\";\nimport { Card, Typography, Input } from \"antd\";\nimport Api from \"../Api\";\nconst { TextArea } = Input;\n\n///   start  =======>=======>=======>\n\n// fake data generator\n// const getItems = (count, offset = 0) =>\n//   Array.from({ length: count }, (v, k) => k).map((k) => ({\n//     id: `item-${k + offset}`,\n//     content: `item ${k + offset}`,\n//   }));\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\n/**\n * Moves an item from one list to another list.\n */\nconst move = (source, destination, droppableSource, droppableDestination) => {\n  const sourceClone = Array.from(source);\n  const destClone = Array.from(destination);\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\n\n  destClone.splice(droppableDestination.index, 0, removed);\n\n  const result = {};\n  result[droppableSource.droppableId] = sourceClone;\n  result[droppableDestination.droppableId] = destClone;\n\n  return result;\n};\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the wells look a bit nicer\n  userSelect: \"none\",\n  padding: grid * 2,\n  margin: `0 0 ${grid}px 0`,\n\n  // change background colour if dragging\n  background: isDragging ? \"lightgreen\" : \"grey\",\n\n  // styles we need to apply on draggables\n  ...draggableStyle,\n});\n\nconst getListStyle = (isDraggingOver) => ({\n  background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n  minHeight: \"70vh\",\n  // padding: grid,\n  // width: 250,\n});\n\n///////////ENDDDDDD=======>\n\n\nconst wellDefault = {\n  created_by: \"\",\n  text: \"\",\n  card_type: \"well\",\n  votes: 0,\n};\nconst improveDefault = {\n  created_by: \"\",\n  text: \"\",\n  card_type: \"improve\",\n  votes: 0,\n};\nconst actionDefault = {\n  created_by: \"\",\n  text: \"\",\n  card_type: \"action\",\n  votes: 0,\n};\nconst formVisible = {\n  wellVisible: false,\n  improveVisible: false,\n  actionVisible: false,\n};\n\nconst Board = ({ cards }) => {\n  // const [wellData, setWell] = useState([]);\n  const [show, setShow] = useState(formVisible);\n  const [formWell, setFormWell] = useState(wellDefault);\n  const [formImprove, setFormImprove] = useState(improveDefault);\n  const [formAction, setFormAction] = useState(actionDefault);\n  // const [improvesData, setImproves] = useState([]);\n  // const [actions, setActions] = useState([]);\n  const [cardsData, setCards] = useState([]);\n  const { id } = useParams(); /////========>>>\n\n  const [state, setState] = useState({\n    wells: [],\n    improves: [],\n    actions: [],\n    retro_id: \"\",\n  });\n  const { actions, wells, improves, retro_id } = state;\n  const id2List = {\n    dropWell: \"wells\",\n    dropImprove: \"improves\",\n    dropAction: \"actions\",\n  };\n\n  useEffect(async () => {\n    await Api.getRetro(id)\n      .get()\n      .then((res) => {\n        let well = res.data.cards.filter((item) => item.card_type === \"well\");\n        let retro_id = res.data.id;\n        //setWell(well);\n        let improves = res.data.cards.filter(\n          (item) => item.card_type === \"improve\"\n        );\n        //setImproves(improves);\n        let action = res.data.cards.filter(\n          (item) => item.card_type === \"action\"\n        );\n        setState({\n          wells: well,\n          improves: improves,\n          actions: action,\n          retro_id: retro_id,\n        });\n      });\n  }, []);\n\n  const getList = (id) => state[id2List[id]];\n\n  const onDragEnd = (result) => {\n    console.log(result, \"result for DRAG END\");\n    const { source, destination } = result;\n    console.log(source, \"source for DRAG END\");\n    console.log(destination, \"destination for DRAG END\");\n    // dropped outside the list\n    if (!destination) {\n      return;\n    }\n\n    if (source.droppableId === destination.droppableId) {\n      const columnCards = reorder(\n        getList(source.droppableId),\n        source.index,\n        destination.index\n      );\n\n      let stateColumn = { columnCards };\n      console.log(\n        stateColumn,\n        \"STATE row 133 if (source.droppableId === destination.droppableId) {\"\n      );\n\n      console.log(\n        source,\n        \"Ssource.droppableId === (source.droppableId === destination.droppableId) {\"\n      );\n      if (source.droppableId === \"dropImprove\") {\n        stateColumn = { improves: columnCards };\n      } else if (source.droppableId === \"dropAction\") {\n        stateColumn = { actions: columnCards };\n        console.log(\n          state,\n          \"STATS in else if(source.droppableId === dropAction\"\n        );\n      }\n\n      setState({ ...state, stateColumn });\n    } else {\n      console.log(\n        state,\n        \"STATE row 133 else ====>{source.droppableId === destination.droppableId) {\"\n      );\n      console.log(\n        getList(source.droppableId),\n        \"getList(source.droppableId)=======>\"\n      );\n      console.log(\n        getList(destination.droppableId),\n        \" getList(destination.droppableId)=======>\"\n      );\n\n      const result = move(\n        getList(source.droppableId),\n        getList(destination.droppableId),\n        source,\n        destination\n      );\n      console.log(result, \"result ==========>>>RESULT\");\n      if (result.dropWell && result.dropImprove) {\n        setState({\n          ...state,\n          wells: result.dropWell,\n          improves: result.dropImprove,\n        });\n      } else if (result.dropWell && result.dropAction) {\n        setState({\n          ...state,\n          wells: result.dropWell,\n          actions: result.dropAction,\n        });\n      } else {\n        setState({\n          ...state,\n          improves: result.dropImprove,\n          actions: result.dropAction,\n        });\n      }\n    }\n  };\n\n  //////======>\n\n  const handleAddWellComment = (e) => {\n    console.log(formWell);\n    if (e.key === \"Enter\" || !e.key) {\n      setShow({ ...show, wellVisible: false });\n      Api.cards\n        .post({ ...formWell, retro_id })\n        .then((res) => {\n          if ((res.statusText = \"OK\")) {\n            setState({ ...state, wells: [...wells, res.data] });\n          }\n        })\n        .catch((reqErr) => {\n          console.error(reqErr);\n          console.log(reqErr.res.status);\n        });\n      setFormWell(wellDefault);\n    }\n  };\n\n  const handleAddImproveComment = (e) => {\n    if (e.key === \"Enter\" || !e.key) {\n      setShow({ ...show, improveVisible: false });\n      Api.cards\n        .post({ ...formImprove, retro_id })\n        .then((res) => {\n          if ((res.statusText = \"OK\")) {\n            setState({ ...state, improves: [...improves, res.data] });\n          }\n        })\n        .catch((reqErr) => {\n          console.error(reqErr);\n          console.log(reqErr.res.status);\n        });\n      setFormImprove(improveDefault);\n    }\n    //console.log(improvesData);\n    //setImproves([...improvesData, formImprove]);\n  };\n\n  const handleAddActionComment = (e) => {\n    if (e.key === \"Enter\" || !e.key) {\n      setShow({ ...show, actionVisible: false });\n      Api.cards\n        .post({ ...formAction, retro_id })\n        .then((res) => {\n          if ((res.statusText = \"OK\")) {\n            setState({...state,actions: [...actions, res.data]});\n          }\n        })\n        .catch((reqErr) => {\n          console.error(reqErr);\n          console.log(reqErr.res.status);\n        });\n      setFormAction(actionDefault);  \n    }\n    // console.log(actions);\n    // setActions([...actions, formAction]);\n  };\n\n  const handleShowWell = () => {\n    if (show.wellVisible) {\n      setShow({ ...show, wellVisible: false });\n      setFormWell(wellDefault);\n    } else {\n      setShow({ ...show, wellVisible: true });\n    }\n  };\n  const handleShowImprove = () => {\n    if (show.improveVisible) {\n      setShow({ ...show, improveVisible: false });\n      setFormImprove(improveDefault);\n    } else {\n      setShow({ ...show, improveVisible: true });\n    }\n  };\n  const handleShowAction = () => {\n    if (show.actionVisible) {\n      setShow({ ...show, actionVisible: false });\n      setFormAction(actionDefault);\n    } else {\n      setShow({ ...show, actionVisible: true });\n    }\n  };\n\n  const handleWellChange = ({ target: { name, value } }) => {\n    setFormWell({ ...formWell, [name]: value });\n  };\n\n  const handleImproveChange = ({ target: { name, value } }) => {\n    setFormImprove({ ...formImprove, [name]: value });\n  };\n\n  const handleActionChange = ({ target: { name, value } }) => {\n    setFormAction({ ...formAction, [name]: value });\n  };\n\n  const handleCloseActionForm = () => {\n    setFormAction(actionDefault);\n    setShow({ ...show, actionVisible: false });\n  };\n  const handleCloseImproveForm = () => {\n    setFormImprove(improveDefault);\n    setShow({ ...show, improveVisible: false });\n  };\n  const handleCloseWellForm = () => {\n    setFormWell(wellDefault);\n    setShow({ ...show, wellVisible: false });\n  };\n\n  return (\n    <div>\n      <div className=\"retro-headers\">\n        <div style={{ width: \"30%\" }}>\n          <Typography>\n            <h3>Went well</h3>\n          </Typography>\n          <button\n            disabled={show.wellVisible}\n            onClick={handleShowWell}\n            className={show.wellVisible ? \"disbled-button\" : \"prymary-color\"}\n          >\n            {show.wellVisible ? \"Close\" : \"+\"}\n          </button>\n        </div>\n        <div style={{ width: \"30%\" }}>\n          <Typography>\n            <h3>To improve</h3>\n          </Typography>\n          <button\n            disabled={show.improveVisible}\n            onClick={handleShowImprove}\n            className={show.improveVisible ? \"disbled-button\" : \"prymary-color\"}\n          >\n            {show.improveVisible ? \"Close\" : \"+\"}\n          </button>\n        </div>\n        <div style={{ width: \"30%\" }}>\n          <Typography>\n            <h3>Action items</h3>\n          </Typography>\n          <button\n            disabled={show.actionVisible}\n            onClick={handleShowAction}\n            className={show.actionVisible ? \"disbled-button\" : \"prymary-color\"}\n          >\n            {show.actionVisible ? \"Close\" : \"+\"}\n          </button>\n        </div>\n      </div>\n\n      <div className=\"board-columns column-wrapper\">\n        {/* ============>>>>>>>> */}\n        <DragDropContext onDragEnd={onDragEnd}>\n          <div style={{ width: \"30%\" }}>\n            <TextArea\n              value={formWell.text}\n              name=\"text\"\n              className=\"text-field\"\n              onKeyDown={handleAddWellComment}\n              onChange={handleWellChange}\n              style={{ display: show.wellVisible ? \"inline-block\" : \"none\" }}\n              placeholder=\"What did go well ?\"\n              autoSize={{ minRows: 3, maxRows: 4 }}\n            />\n            <div className=\"icons-right\">\n              <CloseCircleFilled\n                onClick={handleCloseWellForm}\n                style={{ display: show.wellVisible ? \"inline-block\" : \"none\" }}\n                className=\"remove-icon\"\n              />\n              <CheckCircleFilled\n                onClick={handleAddWellComment}\n                style={{ display: show.wellVisible ? \"inline-block\" : \"none\" }}\n                className=\"accept-icon\"\n              />\n            </div>\n            <Droppable droppableId=\"dropWell\">\n              {(provided, snapshot) => (\n                <div\n                  ref={provided.innerRef}\n                  style={getListStyle(snapshot.isDraggingOver)}\n                >\n                  {state.wells.map((item, index) => (\n                    <Draggable\n                      key={item.id}\n                      draggableId={item.id.toString()}\n                      index={index}\n                    >\n                      {(provided, snapshot) => (\n                        <div\n                          ref={provided.innerRef}\n                          {...provided.draggableProps}\n                          {...provided.dragHandleProps}\n                          style={getItemStyle(\n                            snapshot.isDragging,\n                            provided.draggableProps.style\n                          )}\n                        >\n                          {item.text}\n                        </div>\n                      )}\n                    </Draggable>\n                  ))}\n                  {provided.placeholder}\n                </div>\n              )}\n            </Droppable>\n          </div>\n          <div style={{ width: \"30%\" }}>\n            <TextArea\n              value={formImprove.text}\n              name=\"text\"\n              className=\"text-field\"\n              onKeyDown={handleAddImproveComment}\n              onChange={handleImproveChange}\n              style={{ display: show.improveVisible ? \"inline-block\" : \"none\" }}\n              placeholder=\"What should be improved ?\"\n              autoSize={{ minRows: 3, maxRows: 4 }}\n            />\n            <div className=\"icons-right\">\n              <CloseCircleFilled\n                onClick={handleCloseImproveForm}\n                style={{\n                  display: show.improveVisible ? \"inline-block\" : \"none\",\n                }}\n                className=\"remove-icon\"\n              />\n              <CheckCircleFilled\n                onClick={handleAddImproveComment}\n                style={{\n                  display: show.improveVisible ? \"inline-block\" : \"none\",\n                }}\n                className=\"accept-icon\"\n              />\n            </div>\n            <Droppable droppableId=\"dropImprove\">\n              {(provided, snapshot) => (\n                <div\n                  ref={provided.innerRef}\n                  style={getListStyle(snapshot.isDraggingOver)}\n                >\n                  {state.improves.map((item, index) => (\n                    <Draggable\n                      key={item.id}\n                      draggableId={item.id.toString()}\n                      index={index}\n                    >\n                      {(provided, snapshot) => (\n                        <div\n                          ref={provided.innerRef}\n                          {...provided.draggableProps}\n                          {...provided.dragHandleProps}\n                          style={getItemStyle(\n                            snapshot.isDragging,\n                            provided.draggableProps.style\n                          )}\n                        >\n                          {item.text}\n                        </div>\n                      )}\n                    </Draggable>\n                  ))}\n                  {provided.placeholder}\n                </div>\n              )}\n            </Droppable>\n          </div>\n          <div style={{ width: \"30%\" }}>\n            <TextArea\n              value={formAction.text}\n              name=\"text\"\n              className=\"text-field\"\n              style={{ display: show.actionVisible ? \"inline-block\" : \"none\" }}\n              onKeyDown={handleAddActionComment}\n              onChange={handleActionChange}\n              placeholder=\"What are we going to do ?\"\n              autoSize={{ minRows: 3, maxRows: 4 }}\n            />\n            <div className=\"icons-right\">\n              <CloseCircleFilled\n                onClick={handleCloseActionForm}\n                style={{\n                  display: show.actionVisible ? \"inline-block\" : \"none\",\n                }}\n                className=\"remove-icon\"\n              />\n              <CheckCircleFilled\n                onClick={handleAddActionComment}\n                style={{\n                  display: show.actionVisible ? \"inline-block\" : \"none\",\n                }}\n                className=\"accept-icon\"\n              />\n            </div>\n            <Droppable droppableId=\"dropAction\">\n              {(provided, snapshot) => (\n                <div\n                  ref={provided.innerRef}\n                  style={getListStyle(snapshot.isDraggingOver)}\n                >\n                  {state.actions.map((item, index) => (\n                    <Draggable\n                      key={item.id}\n                      draggableId={item.id.toString()}\n                      index={index}\n                    >\n                      {(provided, snapshot) => (\n                        <div\n                          ref={provided.innerRef}\n                          {...provided.draggableProps}\n                          {...provided.dragHandleProps}\n                          style={getItemStyle(\n                            snapshot.isDragging,\n                            provided.draggableProps.style\n                          )}\n                        >\n                          {item.text}\n                        </div>\n                      )}\n                    </Draggable>\n                  ))}\n                  {provided.placeholder}\n                </div>\n              )}\n            </Droppable>\n          </div>\n        </DragDropContext>\n\n        {/* ============>>>>>>>> */}\n        {/* <div className=\"column-style\">\n          <div style={{ width: \"30%\", position: \"absolute\" }}>\n            <TextArea\n              value={formWell.text}\n              name=\"text\"\n              className=\"text-field\"\n              onChange={handleWellChange}\n              style={{ display: show.wellVisible ? \"inline-block\" : \"none\" }}\n              placeholder=\"What did go well ?\"\n              autoSize={{ minRows: 3, maxRows: 4 }}\n            />\n            <CheckCircleFilled\n              onClick={handleAddWellComment}\n              style={{ display: show.wellVisible ? \"inline-block\" : \"none\" }}\n              className=\"accept-icon\"\n            />\n            {wellData.map((item) => {\n              console.log(item, \"itemitemitem\", wellData);\n              return <Card className=\"went-well card-style\">{item.text}</Card>;\n            })}\n\n          </div>\n        </div> \n\n        {/* <div className=\"column-style\">\n          <div style={{ width: \"30%\", position: \"absolute\" }}>\n            <TextArea\n              value={formImprove.text}\n              name=\"text\"\n              className=\"text-field\"\n              onChange={handleImproveChange}\n              style={{ display: show.improveVisible ? \"inline-block\" : \"none\" }}\n              placeholder=\"What should be improved ?\"\n              autoSize={{ minRows: 3, maxRows: 4 }}\n            />\n            <CheckCircleFilled\n              onClick={handleAddImproveComment}\n              style={{ display: show.improveVisible ? \"inline-block\" : \"none\" }}\n              className=\"accept-icon\"\n            />\n            {improvesData &&\n              improvesData.map((item) => {\n                return (\n                  <Card className=\"to-improve card-style\">\n                    {item.text}\n                  </Card>\n                );\n              })}\n            <Card className=\"to-improve card-style\">Card content</Card>\n          </div>\n        </div>\n\n        <div className=\"column-style\">\n          <div style={{ width: \"30%\", position: \"absolute\" }}>\n            <TextArea\n              value={formAction.text}\n              name=\"text\"\n              className=\"text-field\"\n              style={{ display: show.actionVisible ? \"inline-block\" : \"none\" }}\n              onChange={handleActionChange}\n              placeholder=\"What are we going to do ?\"\n              autoSize={{ minRows: 3, maxRows: 4 }}\n            />\n            <CheckCircleFilled\n              onClick={handleAddActionComment}\n              style={{ display: show.actionVisible ? \"inline-block\" : \"none\" }}\n              className=\"accept-icon\"\n            />\n            {actions &&\n              actions.map((item) => {\n                return (\n                  <Card className=\"actions card-style\">{item.text}</Card>\n                );\n              })}\n            <Card className=\"actions card-style\">Card content</Card>\n          </div>\n        </div> */}\n      </div>\n    </div>\n  );\n};\n\nexport default Board;\n","/Users/khoren/work/Retro/src/App.js",["82","83"],"/Users/khoren/work/Retro/src/components/Footer.js",[],"/Users/khoren/work/Retro/src/components/RetroForm.js",["84","85","86"],"/Users/khoren/work/Retro/src/index.js",[],"/Users/khoren/work/Retro/src/components/Header.js",["87","88","89","90","91"],{"ruleId":"92","severity":1,"message":"93","line":1,"column":17,"nodeType":"94","messageId":"95","endLine":1,"endColumn":23},{"ruleId":"92","severity":1,"message":"96","line":4,"column":24,"nodeType":"94","messageId":"95","endLine":4,"endColumn":36},{"ruleId":"92","severity":1,"message":"97","line":20,"column":30,"nodeType":"94","messageId":"95","endLine":20,"endColumn":37},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"92","severity":1,"message":"102","line":2,"column":8,"nodeType":"94","messageId":"95","endLine":2,"endColumn":13},{"ruleId":"92","severity":1,"message":"103","line":6,"column":3,"nodeType":"94","messageId":"95","endLine":6,"endColumn":20},{"ruleId":"92","severity":1,"message":"104","line":7,"column":3,"nodeType":"94","messageId":"95","endLine":7,"endColumn":20},{"ruleId":"105","severity":1,"message":"106","line":16,"column":13,"nodeType":"107","endLine":22,"endColumn":4},{"ruleId":"108","severity":1,"message":"109","line":36,"column":1,"nodeType":"110","endLine":43,"endColumn":3},{"ruleId":"111","severity":1,"message":"112","line":32,"column":15,"nodeType":"113","messageId":"114","endLine":32,"endColumn":36},{"ruleId":"105","severity":1,"message":"106","line":12,"column":13,"nodeType":"107","endLine":19,"endColumn":4},{"ruleId":"105","severity":1,"message":"115","line":19,"column":6,"nodeType":"116","endLine":19,"endColumn":8,"suggestions":"117"},{"ruleId":"98","replacedBy":"118"},{"ruleId":"100","replacedBy":"119"},{"ruleId":"92","severity":1,"message":"120","line":6,"column":10,"nodeType":"94","messageId":"95","endLine":6,"endColumn":14},{"ruleId":"92","severity":1,"message":"121","line":102,"column":10,"nodeType":"94","messageId":"95","endLine":102,"endColumn":19},{"ruleId":"92","severity":1,"message":"122","line":102,"column":21,"nodeType":"94","messageId":"95","endLine":102,"endColumn":29},{"ruleId":"105","severity":1,"message":"106","line":118,"column":13,"nodeType":"107","endLine":139,"endColumn":4},{"ruleId":"105","severity":1,"message":"123","line":139,"column":6,"nodeType":"116","endLine":139,"endColumn":8,"suggestions":"124"},{"ruleId":"92","severity":1,"message":"125","line":11,"column":8,"nodeType":"94","messageId":"95","endLine":11,"endColumn":14},{"ruleId":"92","severity":1,"message":"126","line":12,"column":8,"nodeType":"94","messageId":"95","endLine":12,"endColumn":14},{"ruleId":"92","severity":1,"message":"127","line":2,"column":10,"nodeType":"94","messageId":"95","endLine":2,"endColumn":17},{"ruleId":"92","severity":1,"message":"128","line":26,"column":7,"nodeType":"94","messageId":"95","endLine":26,"endColumn":14},{"ruleId":"111","severity":1,"message":"112","line":44,"column":15,"nodeType":"113","messageId":"114","endLine":44,"endColumn":36},{"ruleId":"92","severity":1,"message":"129","line":1,"column":17,"nodeType":"94","messageId":"95","endLine":1,"endColumn":26},{"ruleId":"92","severity":1,"message":"130","line":1,"column":27,"nodeType":"94","messageId":"95","endLine":1,"endColumn":35},{"ruleId":"92","severity":1,"message":"131","line":2,"column":22,"nodeType":"94","messageId":"95","endLine":2,"endColumn":27},{"ruleId":"92","severity":1,"message":"132","line":3,"column":8,"nodeType":"94","messageId":"95","endLine":3,"endColumn":11},{"ruleId":"133","severity":1,"message":"134","line":21,"column":9,"nodeType":"135","endLine":21,"endColumn":144},"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'CopyOutlined' is defined but never used.","'user_id' is assigned a value but never used.","no-native-reassign",["136"],"no-negated-in-lhs",["137"],"'axios' is defined but never used.","'CheckCircleFilled' is defined but never used.","'CloseCircleFilled' is defined but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","React Hook useEffect has missing dependencies: 'cards' and 'id'. Either include them or remove the dependency array.","ArrayExpression",["138"],["136"],["137"],"'Card' is defined but never used.","'cardsData' is assigned a value but never used.","'setCards' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["139"],"'Header' is defined but never used.","'Footer' is defined but never used.","'NavLink' is defined but never used.","'history' is assigned a value but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'Image' is defined but never used.","'Api' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"140","fix":"141"},{"desc":"142","fix":"143"},"Update the dependencies array to be: [cards, id]",{"range":"144","text":"145"},"Update the dependencies array to be: [id]",{"range":"146","text":"147"},[533,535],"[cards, id]",[3724,3726],"[id]"]